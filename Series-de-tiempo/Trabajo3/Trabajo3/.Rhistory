knitr::opts_chunk$set(echo = TRUE)
library(astsa)
library(tidyverse)
library(forecast)
library(tseries)
library(car)
library(MASS)
# Lectura de datos:
class(unemp)
plot(unemp)
adf.test(unemp)
plot.ts(diff(unemp), main = " Serie original diferenciada",
ylab = "Z_t-Z_t-1")
# Lo haremos de la siguiente manera, con la libreria forecast:
unemp_lambda <- powerTransform(unemp)
unemp_lambda
# Ahora, aplicamos el el método con el valor de lambda encontrado
unemp_transf <- BoxCox(unemp, lambda= -0.02129048)
unemp_transf %>% plot(main = "Serie transformada", las = 1)
plot.ts(diff(unemp_transf))
acf(unemp_transf, type ="correlation")
ndiffs(unemp_transf)
## ACF:
acf(diff(unemp_transf), lag.max=10, ylim=c(-1,1))
#PACF:
pacf(diff(unemp_transf), lag.max=10, ylim=c(-1,1))
serie_transf <- diff(unemp_transf)
adf.test(serie_transf)
modelo_con <- auto.arima(serie_transf)
modelo_con
modelo_sin <- auto.arima(unemp)
modelo_sin
modelo_sin %>% checkresiduals()
modelo_sin$residuals %>% qqnorm()
modelo_sin$residuals %>% qqline()
modelo_sin$residuals %>% shapiro.test()
##arima(serie_transf, order=c(2, 0, 2))
modelo_con <- auto.arima(serie_transf)
modelo_con
modelo_con %>% checkresiduals(lag = 25)
modelo_con$residuals %>% qqnorm()
modelo_con$residuals %>% qqline()
## INTENTO, NO OLVIDAR QUITAR EN CASO TAL
mod1 <- decompose(unemp, type = "mult")
plot(mod1$trend)
datos <- mod1$x
pronostico <- forecast(modelo_con,12,level=95)
plot(pronostico, main="Pronóstico para los últimos 12 meses")
matriz_pronosticos <-data.frame(pronostico$mean,pronostico$lower,
pronostico$upper)
matriz_pronosticos
#view(unemp)
hw <- HoltWinters(unemp)
# Obtener los valores óptimos de alpha, beta y gamma
alpha_optimo <- hw$alpha
beta_optimo <- hw$beta
gamma_optimo <- hw$gamma
# Imprimir los valores óptimos
cat("Alpha óptimo:", alpha_optimo, "\n")
cat("Beta óptimo:", beta_optimo, "\n")
cat("Gamma óptimo:", gamma_optimo, "\n")
# Realizar el pronóstico
forecast <- predict(hw, n.ahead = 12, prediction.interval = TRUE, level = 0.95)
# Visualizar los resultados
plot(hw, forecast)
forecast <- forecast(hw, h = 12)
error <- accuracy(forecast)[2]
cat("Minimum Error:", error, "\n")
print(forecast)
install.packages("tsoutliers")
library(tsoutliers)
datos_T2 <- read.csv("/../Trabajo 2/Trabajo2/Serie01_We_02_W6.csv")
datos_T2 <- read.csv("../Trabajo 2/Trabajo2/Serie01_We_02_W6.csv")
datos_T2 <- read.csv("\..\Trabajo 2\Trabajo2\Serie01_We_02_W6.csv")
datos_T2 <- read.csv("..\Trabajo 2\Trabajo2\Serie01_We_02_W6.csv")
datos_T2 <- read.csv("../Trabajo 2/Trabajo2/Serie01_We_02_W6.csv")
datos_T2 <- read.csv("/../Trabajo 2/Trabajo2/Serie01_We_02_W6.csv")
datos_T2 <- read.csv("../../Trabajo 2/Trabajo2/Serie01_We_02_W6.csv")
View(datos_T2)
datos_T2 <- read.csv("../../Trabajo 2/Trabajo2/Serie01_We_02_W6.csv")
datos_T2 <- ts(datos_T2)
outliers <- locate.outliers(datos_T2)
outliers <- locate.outliers(datos_T2)
mod1_CSS_ML=Arima(datos_ts, c(0, 1, 1), include.drift=TRUE, lambda=.43, method = c("CSS-ML"))
mod1_CSS_ML=Arima(datos_T2, c(0, 1, 1), include.drift=TRUE, lambda=.43, method = c("CSS-ML"))
pars <- coefs2poly(fit)
pars <- coefs2poly(mod1_CSS_ML)
outliers <- locate.outliers(data=datos_T2 ,  mod1_CSS_ML   )
outliers <- locate.outliers(datos_T2 ,  mod1_CSS_ML   )
pars <- coefs2poly(mod1_CSS_ML)
resid <- residuals(mod1_CSS_ML)
outliers <- locate.outliers(resid, pars)
resid
outliers <- locate.outliers(datos_T2, pars)
outliers
outliers
find.consecutive.outliers(datos_T2, type="LS")
datos_T2
find.consecutive.outliers(datos_T2, type="LS")
find.consecutive.outliers(x=datos_T2, type="LS")
find.consecutive.outliers(x=datos_T2, type="LS")
knitr::opts_chunk$set(echo = TRUE)
datos <- read.csv("../../Trabajo 2/Trabajo2/Serie01_We_02_W6.csv", sep = ";")
datos_ts = ts(datos) # Conversión a serie de tiempo
library(tsoutliers)
locate.outliers(datos_ts)
mod1_CSS_ML=Arima(datos_ts, c(0, 1, 1), include.drift=TRUE, lambda=.43, method = c("CSS-ML"))
library(forecast)
mod1_CSS_ML=Arima(datos_ts, c(0, 1, 1), include.drift=TRUE, lambda=.43, method = c("CSS-ML"))
locate.outliers(datos_ts)
tso(datos_ts)
sdreiduales4 <- sd(mod1_CSS_ML$residuals)
sdreiduales4 <- sd(mod1_CSS_ML$residuals)
sdreiduales4
pars <- coefs2poly(fit)
pars <- coefs2poly(mod1_CSS_ML)
otypes <- c("AO", "LS", "TC")
mo0 <- locate.outliers(datos_ts, pars, types = otypes)
mo0
modT4 <- tso(datos_ts)
plot.tsoutliers(modT4)
datos_ts = ts(datos^.43) # Conversión a serie de tiempo
mod1_CSS_ML=Arima(datos_ts, c(0, 1, 1), include.drift=TRUE, lambda=.43, method = c("CSS-ML"))
pars <- coefs2poly(mod1_CSS_ML)
otypes <- c("AO", "LS", "TC")
mo0 <- locate.outliers(datos_ts, pars, types = otypes)
mo0
modT4 <- tso(datos_ts)
plot.tsoutliers(modT4)
library(forecast)
datos <- read.csv("../../Trabajo 2/Trabajo2/Serie01_We_02_W6.csv", sep = ";")
datos_ts = ts(datos^.43) # Conversión a serie de tiempo
mod1_CSS_ML=Arima(datos_ts, c(0, 1, 1), include.drift=TRUE, lambda=.43, method = c("CSS-ML"))
pars <- coefs2poly(mod1_CSS_ML)
otypes <- c("AO", "LS", "TC")
mo0 <- locate.outliers(datos_ts, pars, types = otypes)
mo0
modT4 <- tso(datos_ts)
plot.tsoutliers(modT4)
pars <- coefs2poly(mod1_CSS_ML)
otypes <- c("AO", "LS", "TC","LC")
mo0 <- locate.outliers(datos_ts, pars, types = otypes)
mo0
pars <- coefs2poly(mod1_CSS_ML)
otypes <- c("AO", "TC","LC")
mo0 <- locate.outliers(datos_ts, pars, types = otypes)
mo0
library(forecast)
datos <- read.csv("../../Trabajo 2/Trabajo2/Serie01_We_02_W6.csv", sep = ";")
datos_ts = ts(datos) # Conversión a serie de tiempo
mod1_CSS_ML=Arima(datos_ts, c(0, 1, 1), include.drift=TRUE, lambda=.43, method = c("CSS-ML"))
datos_ts = ts(datos^.43)
pars <- coefs2poly(mod1_CSS_ML)
otypes <- c("AO", "TC","LC")
mo0 <- locate.outliers(datos_ts, pars, types = otypes)
mo0
modT4 <- tso(datos_ts)
plot.tsoutliers(modT4)
pars <- coefs2poly(mod1_CSS_ML)
otypes <- c("AO", "TC","LC","IO")
mo0 <- locate.outliers(datos_ts, pars, types = otypes)
mo0
pars <- coefs2poly(mod1_CSS_ML)
otypes <- c("AO", "TC","LC","TA")
mo0 <- locate.outliers(datos_ts, pars, types = otypes)
mo0
tso(datos_ts)
pars <- coefs2poly(mod1_CSS_ML)
otypes <- c("AO", "TC","LS")
mo0 <- locate.outliers(datos_ts, pars, types = otypes)
mo0
tso(datos_ts)
tso(datos_ts)$ind
knitr::opts_chunk$set(echo = TRUE)
library(astsa)
library(tidyverse)
library(forecast)
library(tseries)
library(car)
library(MASS)
# Lectura de datos:
class(unemp)
plot(unemp)
adf.test(unemp)
plot.ts(diff(unemp), main = " Serie original diferenciada",
ylab = "Z_t-Z_t-1")
# Lo haremos de la siguiente manera, con la libreria forecast:
unemp_lambda <- powerTransform(unemp)
unemp_lambda
# Ahora, aplicamos el el método con el valor de lambda encontrado
unemp_transf <- BoxCox(unemp, lambda= -0.02129048)
unemp_transf %>% plot(main = "Serie transformada", las = 1)
plot.ts(diff(unemp_transf))
acf(unemp_transf, type ="correlation")
ndiffs(unemp_transf)
## ACF:
acf(diff(unemp_transf), lag.max=10, ylim=c(-1,1))
#PACF:
pacf(diff(unemp_transf), lag.max=10, ylim=c(-1,1))
serie_transf <- diff(unemp_transf)
adf.test(serie_transf)
modelo_con <- auto.arima(serie_transf)
modelo_con
modelo_sin <- auto.arima(unemp)
modelo_sin
modelo_sin %>% checkresiduals()
modelo_sin$residuals %>% qqnorm()
modelo_sin$residuals %>% qqline()
modelo_sin$residuals %>% shapiro.test()
##arima(serie_transf, order=c(2, 0, 2))
modelo_con <- auto.arima(serie_transf)
modelo_con
modelo_con %>% checkresiduals(lag = 25)
modelo_con$residuals %>% qqnorm()
modelo_con$residuals %>% qqline()
## INTENTO, NO OLVIDAR QUITAR EN CASO TAL
mod1 <- decompose(unemp, type = "mult")
plot(mod1$trend)
datos <- mod1$x
pronostico <- forecast(modelo_con,12,level=95)
plot(pronostico, main="Pronóstico para los últimos 12 meses")
matriz_pronosticos <-data.frame(pronostico$mean,pronostico$lower,
pronostico$upper)
matriz_pronosticos
#view(unemp)
hw <- HoltWinters(unemp)
# Obtener los valores óptimos de alpha, beta y gamma
alpha_optimo <- hw$alpha
beta_optimo <- hw$beta
gamma_optimo <- hw$gamma
# Imprimir los valores óptimos
cat("Alpha óptimo:", alpha_optimo, "\n")
cat("Beta óptimo:", beta_optimo, "\n")
cat("Gamma óptimo:", gamma_optimo, "\n")
# Realizar el pronóstico
forecast <- predict(hw, n.ahead = 12, prediction.interval = TRUE, level = 0.95)
# Visualizar los resultados
plot(hw, forecast)
forecast <- forecast(hw, h = 12)
error <- accuracy(forecast)[2]
cat("Minimum Error:", error, "\n")
print(forecast)
summary(pronostico)
summary(forecast)
library(forecast)
datos <- read.csv("../../Trabajo 2/Trabajo2/Serie01_We_02_W6.csv", sep = ";")
datos_ts = ts(datos) # Conversión a serie de tiempo
mod1_CSS_ML=Arima(datos_ts, c(0, 1, 1), include.drift=TRUE, lambda=.43, method = c("CSS-ML"))
datos_ts = ts(datos^.43)
tso(datos_ts)
library(readr)
tso(datos_ts)
library(tsoutliers)
tso(datos_ts)
knitr::opts_chunk$set(echo = TRUE)
library(astsa)
library(tidyverse)
library(forecast)
library(tseries)
library(car)
library(MASS)
# Lectura de datos:
class(unemp)
plot(unemp)
adf.test(unemp)
plot.ts(diff(unemp), main = " Serie original diferenciada",
ylab = "Z_t-Z_t-1")
# Lo haremos de la siguiente manera, con la libreria forecast:
unemp_lambda <- powerTransform(unemp)
unemp_lambda
# Ahora, aplicamos el el método con el valor de lambda encontrado
unemp_transf <- BoxCox(unemp, lambda= -0.02129048)
unemp_transf %>% plot(main = "Serie transformada", las = 1)
plot.ts(diff(unemp_transf))
acf(unemp_transf, type ="correlation")
ndiffs(unemp_transf)
## ACF:
acf(diff(unemp_transf), lag.max=10, ylim=c(-1,1))
#PACF:
pacf(diff(unemp_transf), lag.max=10, ylim=c(-1,1))
serie_transf <- diff(unemp_transf)
adf.test(serie_transf)
modelo_con <- auto.arima(serie_transf)
modelo_con
modelo_sin <- auto.arima(unemp)
modelo_sin
modelo_sin %>% checkresiduals()
modelo_sin$residuals %>% qqnorm()
modelo_sin$residuals %>% qqline()
modelo_sin$residuals %>% shapiro.test()
##arima(serie_transf, order=c(2, 0, 2))
modelo_con <- auto.arima(serie_transf)
modelo_con
modelo_con %>% checkresiduals(lag = 25)
modelo_con$residuals %>% qqnorm()
modelo_con$residuals %>% qqline()
## INTENTO, NO OLVIDAR QUITAR EN CASO TAL
mod1 <- decompose(unemp, type = "mult")
plot(mod1$trend)
datos <- mod1$x
pronostico <- forecast(modelo_con,12,level=95)
plot(pronostico, main="Pronóstico para los últimos 12 meses")
matriz_pronosticos <-data.frame(pronostico$mean,pronostico$lower,
pronostico$upper)
matriz_pronosticos
#view(unemp)
hw <- HoltWinters(unemp)
# Obtener los valores óptimos de alpha, beta y gamma
alpha_optimo <- hw$alpha
beta_optimo <- hw$beta
gamma_optimo <- hw$gamma
# Imprimir los valores óptimos
cat("Alpha óptimo:", alpha_optimo, "\n")
cat("Beta óptimo:", beta_optimo, "\n")
cat("Gamma óptimo:", gamma_optimo, "\n")
# Realizar el pronóstico
forecast <- predict(hw, n.ahead = 12, prediction.interval = TRUE, level = 0.95)
# Visualizar los resultados
plot(hw, forecast)
forecast <- forecast(hw, h = 12)
error <- accuracy(forecast)[2]
cat("Minimum Error:", error, "\n")
print(forecast)
summary(pronostico)
summary(forecast)
library(forecast)
datos <- read.csv("../../Trabajo 2/Trabajo2/Serie01_We_02_W6.csv", sep = ";")
datos_ts = ts(datos) # Conversión a serie de tiempo
mod1_CSS_ML=Arima(datos_ts, c(0, 1, 1), include.drift=TRUE, lambda=.43, method = c("CSS-ML"))
datos_ts = ts(datos^.43)
library(tsoutliers)
tso(datos_ts)
modT4 <- tso(datos_ts)
plot.tsoutliers(modT4)
knitr::opts_chunk$set(echo = TRUE)
library(astsa)
library(tidyverse)
library(forecast)
library(tseries)
library(car)
library(MASS)
# Lectura de datos:
class(unemp)
plot(unemp)
adf.test(unemp)
plot.ts(diff(unemp), main = " Serie original diferenciada",
ylab = "Z_t-Z_t-1")
# Lo haremos de la siguiente manera, con la libreria forecast:
unemp_lambda <- powerTransform(unemp)
unemp_lambda
# Ahora, aplicamos el el método con el valor de lambda encontrado
unemp_transf <- BoxCox(unemp, lambda= -0.02129048)
unemp_transf %>% plot(main = "Serie transformada", las = 1)
plot.ts(diff(unemp_transf))
acf(unemp_transf, type ="correlation")
ndiffs(unemp_transf)
## ACF:
acf(diff(unemp_transf), lag.max=10, ylim=c(-1,1))
#PACF:
pacf(diff(unemp_transf), lag.max=10, ylim=c(-1,1))
serie_transf <- diff(unemp_transf)
adf.test(serie_transf)
modelo_con <- auto.arima(serie_transf)
modelo_con
modelo_sin <- auto.arima(unemp)
modelo_sin
modelo_sin %>% checkresiduals()
modelo_sin$residuals %>% qqnorm()
modelo_sin$residuals %>% qqline()
modelo_sin$residuals %>% shapiro.test()
##arima(serie_transf, order=c(2, 0, 2))
modelo_con <- auto.arima(serie_transf)
modelo_con
modelo_con %>% checkresiduals(lag = 25)
modelo_con$residuals %>% qqnorm()
modelo_con$residuals %>% qqline()
## INTENTO, NO OLVIDAR QUITAR EN CASO TAL
mod1 <- decompose(unemp, type = "mult")
plot(mod1$trend)
datos <- mod1$x
pronostico <- forecast(modelo_con,12,level=95)
plot(pronostico, main="Pronóstico para los últimos 12 meses")
matriz_pronosticos <-data.frame(pronostico$mean,pronostico$lower,
pronostico$upper)
matriz_pronosticos
#view(unemp)
hw <- HoltWinters(unemp)
# Obtener los valores óptimos de alpha, beta y gamma
alpha_optimo <- hw$alpha
beta_optimo <- hw$beta
gamma_optimo <- hw$gamma
# Imprimir los valores óptimos
cat("Alpha óptimo:", alpha_optimo, "\n")
cat("Beta óptimo:", beta_optimo, "\n")
cat("Gamma óptimo:", gamma_optimo, "\n")
# Realizar el pronóstico
forecast <- predict(hw, n.ahead = 12, prediction.interval = TRUE, level = 0.95)
# Visualizar los resultados
plot(hw, forecast)
forecast <- forecast(hw, h = 12)
error <- accuracy(forecast)[2]
cat("Minimum Error:", error, "\n")
print(forecast)
summary(pronostico)
summary(forecast)
library(forecast)
datos <- read.csv("../../Trabajo 2/Trabajo2/Serie01_We_02_W6.csv", sep = ";")
datos_ts = ts(datos) # Conversión a serie de tiempo
mod1_CSS_ML=Arima(datos_ts, c(0, 1, 1), include.drift=TRUE, lambda=.43, method = c("CSS-ML"))
datos_ts = ts(datos^.43)
library(tsoutliers)
tso(datos_ts)
modT4 <- tso(datos_ts)
plot.tsoutliers(modT4)
