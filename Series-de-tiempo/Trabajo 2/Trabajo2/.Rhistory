modelo1
modelo1 <- arima(datos_ts, order= c(2,1,2))
modelo1
auto.arima(datos_ts)
library(ggplot2)
library(tidyverse)
library(car)
library(lmtest)
# Series:
library(tseries)
library(quantmod)
library(foreign)
library(astsa)
library(forcats)
auto.arima()
ndiff(datos_ts)
acf(datos_ts)
library("fUnitRoots")
library(fUnitRoots)
install.packages("fUnitRoots")
library(fUnitRoots)
ndiff(datos_ts)
auto.arima(datos_ts)
install.packages("forecast")
library(forecats)
install.packages("forecast")
library(ggplot2)
library(tidyverse)
library(car)
library(lmtest)
# Series:
library(tseries)
library(quantmod)
library(foreign)
library(astsa)
library(forecats)
library(ggplot2)
library(tidyverse)
library(car)
library(lmtest)
# Series:
library(tseries)
library(quantmod)
library(foreign)
library(astsa)
library(forecats)
install.packages("ForecastComb")
library(ggplot2)
library(tidyverse)
library(car)
library(lmtest)
# Series:
library(tseries)
library(quantmod)
library(foreign)
library(astsa)
library(forecast)
library(fUnitRoots)
auto.arima(datos_ts)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(car)
library(lmtest)
# Series:
library(tseries)
library(quantmod)
library(foreign)
library(astsa)
library(forecast)
library(urca)
library(fUnitRoots)
# Primera vista graficamente de los datos:
plot(datos_ts, col = "blue", main = "Serie", ylab = "Z_t", type = "o")
datos <- read.csv("Serie01_We_02_W6.csv", sep = ";")
datos_ts = ts(datos) # Conversión a serie de tiempo
# Primera vista graficamente de los datos:
plot(datos_ts, col = "blue", main = "Serie", ylab = "Z_t", type = "o")
adf.test(datos_ts, alternative = "stationary")
plot.ts(diff(datos_ts), ylab = "Z_(t)-Z-(t-1)", col = "blue",
main = "Serie original diferenciada", type = "o")
(tBoxCox=powerTransform(datos_ts))
summary(tBoxCox)
plot.ts(datos_ts^.75 ,main = " Serie transformada",ylab = "X_t", xlab = "time", type = "o",col='blue')
plot.ts(diff(datos_ts^.75) ,main = " Serie transformada diferenciada",ylab = "X_t-X_{t-1}", xlab = "time", col = "red", type= "o")
# Con una diferencia:
serie_df1 <- diff(datos_ts)
adf.test(serie_df1, alternative = "stationary")
# Gráfico ACF:
acf(ts(serie_df1, frequency = 1))
# Grafico PACF
pacf(ts(serie_df1, frequency = 1))
modelo1 <- arima(datos_ts, order= c(2,1,2))
modelo1
serie_transf <- datos_ts^0.5
(maxlag=floor(12*(length(datos_ts)/100)^(0.75)))
ru_tz = ur.df(serie_transf, type = c("trend"), lags=maxlag, selectlags = c("BIC"))
summary(ru_tz)
ru_tz=ur.df(serie_transf, type = c("trend"), lags=maxlag, selectlags = c("AIC"))
summary(ru_tz)
resid=ru_tz@testreg$residuals # residuales del modelo ADF
plot(ru_tz)
auto.arima(resid, max.p=5, max.q=5)
# busqueda "automática"
cheq=Arima(resid, c(0,0,0), include.constant=TRUE)
tsdiag(cheq, gof.lag=15)
ru_dif_tz=ur.df(diff(serie_transf), type = c("drift"), lags=maxlag, selectlags = c("BIC"))
summary(ru_dif_tz)
plot.ts(diff(datos_ts), ylab = "Z_(t)-Z-(t-1)", col = "blue",
main = "Serie original diferenciada", type = "o")
(tBoxCox=powerTransform(datos_ts))
summary(tBoxCox)
plot.ts(zˆ.749 ,main = " Serie transformada",ylab = "X_t", xlab = "time", type = "o",col='blue', lwd = 1 )
plot.ts(datos_tsˆ.749 ,main = " Serie transformada",ylab = "X_t", xlab = "time", type = "o",col='blue', lwd = 1 )
plot.ts(datos_ts^(.749) ,main = " Serie transformada",ylab = "X_t", xlab = "time", type = "o",col='blue', lwd = 1 )
plot.ts(datos_ts^(.2) ,main = " Serie transformada",ylab = "X_t", xlab = "time", type = "o",col='blue', lwd = 1 )
plot.ts(datos_ts^(.2) ,main = " Serie transformada",ylab = "X_t", xlab = "time", type = "o",col='blue', lwd = 1 )
plot.ts(datos_ts^(.1) ,main = " Serie transformada",ylab = "X_t", xlab = "time", type = "o",col='blue', lwd = 1 )
plot.ts(datos_ts^(1) ,main = " Serie transformada",ylab = "X_t", xlab = "time", type = "o",col='blue', lwd = 1 )
plot.ts(datos_ts^(1) ,main = " Serie transformada",ylab = "X_t", xlab = "time", type = "o",col='blue', lwd = 1 )
plot.ts(datos_ts^(.1) ,main = " Serie transformada",ylab = "X_t", xlab = "time", type = "o",col='blue', lwd = 1 )
plot.ts(datos_ts^(.75) ,main = " Serie transformada",ylab = "X_t", xlab = "time", type = "o",col='blue', lwd = 1 )
BoxCox.lambda(z, method=c("loglik"), lower=-2, upper=2)
library(quantmod)
library(ggplot2)
library(tidyverse)
library(car)
library(lmtest)
# Series:
library(tseries)
library(quantmod)
library(foreign)
library(astsa)
library(forecast)
library(urca)
library(fUnitRoots)
BoxCox.lambda(datos_ts, method=c("loglik"), lower=-2, upper=2)
datos_ts = ts(datos) # Conversión a serie de tiempo
datos <- read.csv("Serie01_We_02_W6.csv", sep = ";")
datos_ts = ts(datos) # Conversión a serie de tiempo
BoxCox.lambda(datos_ts, method=c("loglik"), lower=-2, upper=2)
BoxCox.lambda(z, method=c("guerrero"))
BoxCox.lambda(datos_ts, method=c("guerrero"))
plot.ts(datos_ts^(.4) ,main = " Serie transformada",ylab = "X_t", xlab = "time", type = "o",col='blue', lwd = 1 )
BoxCox.lambda(datos_ts, method=c("loglik"), lower=-2, upper=2)
BoxCox.lambda(lm(datos_ts), method=c("loglik"), lower=-2, upper=2)
BoxCox.lambda(datos_ts, method=c("loglik"), lower=-2, upper=2)
BoxCox.lambda(datos_ts, method=c("loglik"))
BoxCox.lambda(datos, method=c("loglik"))
BoxCox.lambda(datos, method=c("loglik"), lower=-2, upper=2)
BoxCox.lambda(datos, method=c("loglik"), lower=-2, upper=2)
BoxCox.lambda(datos_ts, method=c("loglik"), lower=-2, upper=2)
plot.ts(datos_ts^(.435) ,main = " Serie transformada",ylab = "X_t", xlab = "time", type = "o",col='blue', lwd = 1 )
plot.ts(datos_ts^(.43) ,main = " Serie transformada",ylab = "X_t", xlab = "time", type = "o",col='blue', lwd = 1 )
plot.ts(datos_ts^(.4) ,main = " Serie transformada",ylab = "X_t", xlab = "time", type = "o",col='blue', lwd = 1 )
plot.ts(datos_ts^(.43) ,main = " Serie transformada",ylab = "X_t", xlab = "time", type = "o",col='blue', lwd = 1 )
plot.ts(datos_ts^(.2) ,main = " Serie transformada",ylab = "X_t", xlab = "time", type = "o",col='blue', lwd = 1 )
plot.ts(datos_ts^(.43) ,main = " Serie transformada",ylab = "X_t", xlab = "time", type = "o",col='blue', lwd = 1 )
plot.ts(diff(datos_ts^.43), ylab = "Z_(t)-Z-(t-1)", col = "blue",
main = "Serie original diferenciada", type = "o")
plot.ts(diff(datos_ts^.43), ylab = "Z_(t)-Z-(t-1)", col = "blue",
main = "Serie transformada diferenciada", type = "o")
Acf(datos_ts^0.25, lag.max=30, ci=0,ylim=c(-1,1))
pacf(datos_ts^0.25, lag.max=30, ylim=c(-1,1))
# Calcular la ESACF
esacf_result <- stats::acf(datos_ts, plot = FALSE)
View(esacf_result)
plot(acf_result, main = "Función de Autocorrelación Muestral Extendida (ESACF)")
plot(esacf_result, main = "Función de Autocorrelación Muestral Extendida (ESACF)")
pacf(datos_ts^0.43, lag.max=30, ylim=c(-1,1))
Acf(datos_ts^0.43, lag.max=30, ci=0,ylim=c(-1,1))
# Calcular la ESACF
esacf_result <- stats::acf(datos_ts^0.43, plot = FALSE)
# Calcular la ESACF
esacf_result <- stats::acf(datos_ts^0.43, plot = FALSE)
plot(esacf_result, main = "Función de Autocorrelación Muestral Extendida (ESACF)")
auto.arima(datos_ts^0.43,max.p=5,max.q=5)
Acf(diff(datos_ts^.43), lag.max=30, ci=0,ylim=c(-1,1))
pacf(diff(datos_ts^.43), lag.max=30, ylim=c(-1,1))
Acf(diff(datos_ts^.43,lag = 2), lag.max=30, ci=0,ylim=c(-1,1))
Acf(diff(datos_ts^.43,lag = 1), lag.max=30, ci=0,ylim=c(-1,1))
pacf(diff(datos_ts^.43,lag = 1), lag.max=30, ylim=c(-1,1))
auto.arima(datos_ts)
auto.arima(datos_ts)
mod1_css_ml = Arima(z,c(0,1,1),include.drift = TRUE ,lambda = .43, method = c("CSS-ML"))
mod1_css_ml = Arima(datos_ts,c(0,1,1),include.drift = TRUE ,lambda = .43, method = c("CSS-ML"))
plot(mod1_css_ml)
plot(mod1_css_ml$series)
plot.window(mod1_css_ml$series)
plot
plot(mod1_css_ml$series)
plot(mod1_css_ml$series,ylim=100)
plot(mod1_css_ml$series,ylim=1000)
plot(mod1_css_ml$series,ylim=10)
plot(mod1_css_ml$series,ylim=10000)
plot(mod1_css_ml$series,ylim=1000)
plot(mod1_css_ml$series,ylim=100)
mod1_css_ml$series
mod1_css_ml$fitted
plot(mod1_css_ml$fitted)
plot(mod1_css_ml$arma)
plot(mod1_css_ml$)
plot(mod1_css_ml$residuals)
plot(mod1_css_ml$model)
mod1_css_ml$model
mod1_css_ml$n.cond
mod1_css_ml$x
plot(mod1_css_ml$x)
serie_actual <- diff(datos_ts^.43)
adf.test(serie_actual, alternative = "stationary")
adf.test(datos_ts^0.43, alternative = "stationary")
(tBoxCox=powerTransform(datos_ts^0.43))
summary(tBoxCox)
plot.ts(datos_ts^0.43 ,main = " Serie transformada",ylab = "X_t", xlab = "time", type = "o",col='blue')
plot.ts(diff(datos_ts^0.43) ,main = " Serie transformada diferenciada",ylab = "X_t-X_{t-1}", xlab = "time", col = "red", type= "o")
# Con una diferencia:
serie_df1 <- diff(datos_ts^0.43)
adf.test(serie_df1, alternative = "stationary")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(car)
library(lmtest)
# Series:
library(tseries)
library(quantmod)
library(foreign)
library(astsa)
library(forecast)
library(urca)
library(fUnitRoots)
datos <- read.csv("Serie01_We_02_W6.csv", sep = ";")
datos_ts = ts(datos) # Conversión a serie de tiempo
# Primera vista graficamente de los datos:
plot(datos_ts, col = "blue", main = "Serie", ylab = "Z_t", type = "o")
plot.ts(diff(datos_ts), ylab = "Z_(t)-Z-(t-1)", col = "blue",
main = "Serie original diferenciada", type = "o")
(tBoxCox=powerTransform(datos_ts))
summary(tBoxCox)
BoxCox.lambda(datos_ts, method=c("guerrero"))
plot.ts(datos_ts^(.43) ,main = " Serie transformada",ylab = "X_t", xlab = "time", type = "o",col='blue', lwd = 1 )
plot.ts(diff(datos_ts^.43), ylab = "Z_(t)-Z-(t-1)", col = "blue",
main = "Serie transformada diferenciada", type = "o")
Acf(datos_ts^0.43, lag.max=30, ci=0,ylim=c(-1,1))
pacf(datos_ts^0.43, lag.max=30, ylim=c(-1,1))
# Calcular la ESACF
esacf_result <- stats::acf(datos_ts^0.43, plot = FALSE)
plot(esacf_result, main = "Función de Autocorrelación Muestral Extendida (ESACF)")
Acf(diff(datos_ts^.43,lag = 1), lag.max=30, ci=0,ylim=c(-1,1))
pacf(diff(datos_ts^.43,lag = 1), lag.max=30, ylim=c(-1,1))
auto.arima(datos_ts^0.43,max.p=5,max.q=5)
adf.test(datos_ts^0.43, alternative = "stationary")
(tBoxCox=powerTransform(datos_ts^0.43))
summary(tBoxCox)
plot.ts(datos_ts^0.43 ,main = " Serie transformada",ylab = "X_t", xlab = "time", type = "o",col='blue')
plot.ts(diff(datos_ts^0.43) ,main = " Serie transformada diferenciada",ylab = "X_t-X_{t-1}", xlab = "time", col = "red", type= "o")
# Con una diferencia:
serie_df1 <- diff(datos_ts^0.43)
adf.test(serie_df1, alternative = "stationary")
serie_transf <- datos_ts^0.5
(maxlag=floor(12*(length(datos_ts)/100)^(0.75)))
ru_tz = ur.df(serie_transf, type = c("trend"), lags=maxlag, selectlags = c("BIC"))
summary(ru_tz)
ru_tz=ur.df(serie_transf, type = c("trend"), lags=maxlag, selectlags = c("AIC"))
summary(ru_tz)
resid=ru_tz@testreg$residuals # residuales del modelo ADF
plot(ru_tz)
auto.arima(resid, max.p=5, max.q=5)
# busqueda "automática"
cheq=Arima(resid, c(0,0,0), include.constant=TRUE)
tsdiag(cheq, gof.lag=15)
ru_dif_tz=ur.df(diff(serie_transf), type = c("drift"), lags=maxlag, selectlags = c("BIC"))
summary(ru_dif_tz)
# Con una diferencia:
serie_df1 <- diff(diff(datos_ts^0.43))
adf.test(serie_df1, alternative = "stationary")
# Con una diferencia:
serie_df1 <- (datos_ts^0.43)
# Con una diferencia:
serie_df1 <- (datos_ts^0.43)
adf.test(serie_df1, alternative = "stationary")
plot(datos_ts^0.43)
plot(datos_ts^0.43)
plot(diff(datos_ts^0.43))
# Con una diferencia:
serie_df1 <- (datos_ts^0.43)
adf.test(serie_df1, alternative = "stationary")
# Con una diferencia:
serie_df1 <- (diff(datos_ts^0.43))
adf.test(serie_df1, alternative = "stationary")
# Con una diferencia:
serie_df1 <- ((datos_ts^0.43))
# Con una diferencia:
serie_df1 <- ((datos_ts^0.43))
adf.test(serie_df1, alternative = "stationary")
ru_tz=ur.df(serie_transf, type = c("trend"), lags=maxlag, selectlags = c("AIC"))
serie_transf <- datos_ts^0.5
(maxlag=floor(12*(length(datos_ts)/100)^(0.75)))
ru_tz = ur.df(serie_transf, type = c("trend"), lags=maxlag, selectlags = c("BIC"))
summary(ru_tz)
ru_tz=ur.df(serie_transf, type = c("trend"), lags=maxlag, selectlags = c("AIC"))
summary(ru_tz)
serie_transf <- datos_ts^0.43
(maxlag=floor(12*(length(datos_ts)/100)^(0.75)))
ru_tz = ur.df(serie_transf, type = c("trend"), lags=maxlag, selectlags = c("BIC"))
summary(ru_tz)
serie_transf <- datos_ts^0.43
(maxlag=floor(12*(length(datos_ts)/100)^(0.75)))
ru_tz = ur.df(serie_transf, type = c("trend"), lags=maxlag, selectlags = c("BIC"))
summary(ru_tz)
ru_tz=ur.df(serie_transf, type = c("trend"), lags=maxlag, selectlags = c("AIC"))
summary(ru_tz)
adf.test(datos_ts^0.43, alternative = "stationary")
adf.test(diff(datos_ts^0.43), alternative = "stationary")
serie_transf <- datos_ts^0.43
(maxlag=floor(12*(length(datos_ts)/100)^(0.75)))
ru_tz = ur.df(serie_transf, type = c("trend"), lags=maxlag, selectlags = c("BIC"))
summary(ru_tz)
ru_tz=ur.df(serie_transf, type = c("trend"), lags=maxlag, selectlags = c("AIC"))
summary(ru_tz)
resid=ru_tz@testreg$residuals # residuales del modelo ADF
plot(ru_tz)
auto.arima(resid, max.p=5, max.q=5)
mod1_CSS_ML=Arima(z, c(0, 1, 1), include.drift=TRUE, lambda=.43, method = c("CSS-ML"))
mod1_CSS_ML=Arima(datos_ts, c(0, 1, 1), include.drift=TRUE, lambda=.43, method = c("CSS-ML"))
summary(mod1_CSS_ML)
autoplot(mod1_CSS_ML)
tsdiag(mod1_CSS_ML)
tsdiag(mod1_CSS_ML)
abline(a=3, b=0)
res1_est=res1_CSS_ML/(mod1_CSS_ML$sigma2ˆ.5)
res1_CSS_ML=residuals(mod1_CSS_ML)
res1_est=res1_CSS_ML/(mod1_CSS_ML$sigma2ˆ.5)
res1_est=res1_CSS_ML/(mod1_CSS_ML$sigma2ˆ.5)
res1_est=res1_CSS_ML/(mod1_CSS_ML$sigma2^0.5)
plot.ts(res1_est, type="o")
abline(a=-3, b=0)
plot.ts(res1_est, type="o")
abline(a=-3, b=0)
abline(a=3, b=0)
(Nobs_Esp=round(length(datos_ts)*2*pnorm(-3, mean = 0, sd = 1, lower.tail = TRUE)))
(Nobs_Esp=round(length(datos_ts)*2*pnorm(-3, mean = 0, sd = 1, lower.tail = TRUE)))
ind=(abs(res1_est)>3.0)
sum(ind)
qqnorm(res1_est, xlab = "Cuantiles Te?ricos", ylab = "Cuantiles Muestrales",
xlim=c(-4,4), ylim=c(-4,4))
qqline(res1_est)
shapiro.test(res1_est)
normalTest(res1_est, method=("ks"))
library(ggplot2)
library(tidyverse)
library(car)
library(lmtest)
# Series:
library(tseries)
library(quantmod)
library(foreign)
library(astsa)
library(forecast)
library(urca)
library(fUnitRoots)
normalTest(res1_est, method=("ks"))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(car)
library(lmtest)
# Series:
library(tseries)
library(quantmod)
library(foreign)
library(astsa)
library(forecast)
library(urca)
library(fUnitRoots)
datos <- read.csv("Serie01_We_02_W6.csv", sep = ";")
datos_ts = ts(datos) # Conversión a serie de tiempo
# Primera vista graficamente de los datos:
plot(datos_ts, col = "blue", main = "Serie", ylab = "Z_t", type = "o")
plot.ts(diff(datos_ts), ylab = "Z_(t)-Z-(t-1)", col = "blue",
main = "Serie original diferenciada", type = "o")
(tBoxCox=powerTransform(datos_ts))
summary(tBoxCox)
BoxCox.lambda(datos_ts, method=c("guerrero"))
plot.ts(datos_ts^(.43) ,main = " Serie transformada",ylab = "X_t", xlab = "time", type = "o",col='blue', lwd = 1 )
plot.ts(diff(datos_ts^.43), ylab = "Z_(t)-Z-(t-1)", col = "blue",
main = "Serie transformada diferenciada", type = "o")
Acf(datos_ts^0.43, lag.max=30, ci=0,ylim=c(-1,1))
pacf(datos_ts^0.43, lag.max=30, ylim=c(-1,1))
# Calcular la ESACF
esacf_result <- stats::acf(datos_ts^0.43, plot = FALSE)
plot(esacf_result, main = "Función de Autocorrelación Muestral Extendida (ESACF)")
Acf(diff(datos_ts^.43,lag = 1), lag.max=30, ci=0,ylim=c(-1,1))
pacf(diff(datos_ts^.43,lag = 1), lag.max=30, ylim=c(-1,1))
auto.arima(datos_ts^0.43,max.p=5,max.q=5)
adf.test(datos_ts^0.43, alternative = "stationary")
adf.test(diff(datos_ts^0.43), alternative = "stationary")
serie_transf <- datos_ts^0.43
(maxlag=floor(12*(length(datos_ts)/100)^(0.75)))
ru_tz = ur.df(serie_transf, type = c("trend"), lags=maxlag, selectlags = c("BIC"))
summary(ru_tz)
ru_tz=ur.df(serie_transf, type = c("trend"), lags=maxlag, selectlags = c("AIC"))
summary(ru_tz)
mod1_CSS_ML=Arima(datos_ts, c(0, 1, 1), include.drift=TRUE, lambda=.43, method = c("CSS-ML"))
summary(mod1_CSS_ML)
autoplot(mod1_CSS_ML)
tsdiag(mod1_CSS_ML)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(car)
library(lmtest)
# Series:
library(tseries)
library(quantmod)
library(foreign)
library(astsa)
library(forecast)
library(urca)
library(fUnitRoots)
datos <- read.csv("Serie01_We_02_W6.csv", sep = ";")
datos_ts = ts(datos) # Conversión a serie de tiempo
# Primera vista graficamente de los datos:
plot(datos_ts, col = "blue", main = "Serie", ylab = "Z_t", type = "o")
plot.ts(diff(datos_ts), ylab = "Z_(t)-Z-(t-1)", col = "blue",
main = "Serie original diferenciada", type = "o")
(tBoxCox=powerTransform(datos_ts))
summary(tBoxCox)
BoxCox.lambda(datos_ts, method=c("guerrero"))
plot.ts(datos_ts^(.43) ,main = " Serie transformada",ylab = "X_t", xlab = "time", type = "o",col='blue', lwd = 1 )
plot.ts(diff(datos_ts^.43), ylab = "Z_(t)-Z-(t-1)", col = "blue",
main = "Serie transformada diferenciada", type = "o")
Acf(datos_ts^0.43, lag.max=30, ci=0,ylim=c(-1,1))
pacf(datos_ts^0.43, lag.max=30, ylim=c(-1,1))
# Calcular la ESACF
esacf_result <- stats::acf(datos_ts^0.43, plot = FALSE)
plot(esacf_result, main = "Función de Autocorrelación Muestral Extendida (ESACF)")
Acf(diff(datos_ts^.43,lag = 1), lag.max=30, ci=0,ylim=c(-1,1))
pacf(diff(datos_ts^.43,lag = 1), lag.max=30, ylim=c(-1,1))
auto.arima(datos_ts^0.43,max.p=5,max.q=5)
adf.test(datos_ts^0.43, alternative = "stationary")
adf.test(diff(datos_ts^0.43), alternative = "stationary")
serie_transf <- datos_ts^0.43
(maxlag=floor(12*(length(datos_ts)/100)^(0.75)))
ru_tz = ur.df(serie_transf, type = c("trend"), lags=maxlag, selectlags = c("BIC"))
summary(ru_tz)
ru_tz=ur.df(serie_transf, type = c("trend"), lags=maxlag, selectlags = c("AIC"))
summary(ru_tz)
mod1_CSS_ML=Arima(datos_ts, c(0, 1, 1), include.drift=TRUE, lambda=.43, method = c("CSS-ML"))
summary(mod1_CSS_ML)
autoplot(mod1_CSS_ML)
tsdiag(mod1_CSS_ML)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(car)
library(lmtest)
# Series:
library(tseries)
library(quantmod)
library(foreign)
library(astsa)
library(forecast)
library(urca)
library(fUnitRoots)
datos <- read.csv("Serie01_We_02_W6.csv", sep = ";")
datos_ts = ts(datos) # Conversión a serie de tiempo
# Primera vista graficamente de los datos:
plot(datos_ts, col = "blue", main = "Serie", ylab = "Z_t", type = "o")
plot.ts(diff(datos_ts), ylab = "Z_(t)-Z-(t-1)", col = "blue",
main = "Serie original diferenciada", type = "o")
(tBoxCox=powerTransform(datos_ts))
summary(tBoxCox)
BoxCox.lambda(datos_ts, method=c("guerrero"))
plot.ts(datos_ts^(.43) ,main = " Serie transformada",ylab = "X_t", xlab = "time", type = "o",col='blue', lwd = 1 )
plot.ts(diff(datos_ts^.43), ylab = "Z_(t)-Z-(t-1)", col = "blue",
main = "Serie transformada diferenciada", type = "o")
Acf(datos_ts^0.43, lag.max=30, ci=0,ylim=c(-1,1))
pacf(datos_ts^0.43, lag.max=30, ylim=c(-1,1))
# Calcular la ESACF
esacf_result <- stats::acf(datos_ts^0.43, plot = FALSE)
plot(esacf_result, main = "Función de Autocorrelación Muestral Extendida (ESACF)")
Acf(diff(datos_ts^.43,lag = 1), lag.max=30, ci=0,ylim=c(-1,1))
pacf(diff(datos_ts^.43,lag = 1), lag.max=30, ylim=c(-1,1))
auto.arima(datos_ts^0.43,max.p=5,max.q=5)
adf.test(datos_ts^0.43, alternative = "stationary")
adf.test(diff(datos_ts^0.43), alternative = "stationary")
serie_transf <- datos_ts^0.43
(maxlag=floor(12*(length(datos_ts)/100)^(0.75)))
ru_tz = ur.df(serie_transf, type = c("trend"), lags=maxlag, selectlags = c("BIC"))
summary(ru_tz)
ru_tz=ur.df(serie_transf, type = c("trend"), lags=maxlag, selectlags = c("AIC"))
summary(ru_tz)
mod1_CSS_ML=Arima(datos_ts, c(0, 1, 1), include.drift=TRUE, lambda=.43, method = c("CSS-ML"))
summary(mod1_CSS_ML)
autoplot(mod1_CSS_ML)
tsdiag(mod1_CSS_ML)
res1_CSS_ML=residuals(mod1_CSS_ML)
res1_est=res1_CSS_ML/(mod1_CSS_ML$sigma2^0.5)
plot.ts(res1_est, type="o")
abline(a=-3, b=0)
abline(a=3, b=0)
(Nobs_Esp=round(length(datos_ts)*2*pnorm(-3, mean = 0, sd = 1, lower.tail = TRUE)))
ind=(abs(res1_est)>3.0)
sum(ind)
qqnorm(res1_est, xlab = "Cuantiles Te?ricos", ylab = "Cuantiles Muestrales",
xlim=c(-4,4), ylim=c(-4,4))
qqline(res1_est)
shapiro.test(res1_est)
resid=ru_tz@testreg$residuals # residuales del modelo ADF
plot(ru_tz)
tinytex:::install_prebuilt()
